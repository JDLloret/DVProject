knitr::opts_chunk$set(echo = TRUE)
pca1_unscaled <- fviz_pca_ind(pca_unscaled,
geom.ind = "point",
habillage = metadata$A_B_vector,
addEllipses = TRUE,
title = "A/B experiment")
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(ggfortify)
library(factoextra)
library(stats)
library(Rtsne)
library(dplyr)
library(tidyr)
library(patchwork)
library(gridExtra)
library(umap)
library(ggpubr)
rep1 <- read.csv("./data/rep1.csv")
rep2 <- read.csv("./data/rep2.csv")
rep3 <- read.csv("./data/rep3.csv")
rep4 <- read.csv("./data/rep4.csv")
rows <- nrow(rep1)
columns <- ncol(rep1)
cat("The data set rep1 has", rows, "rows and", columns, "columns.\n")
rows <- nrow(rep2)
columns <- ncol(rep2)
cat("The data set rep2 has", rows, "rows and", columns, "columns.\n")
rows <- nrow(rep3)
columns <- ncol(rep3)
cat("The data set rep3 has", rows, "rows and", columns, "columns.\n")
rows <- nrow(rep4)
columns <- ncol(rep4)
cat("The data set rep4 has", rows, "rows and", columns, "columns.\n")
rownames(rep1) <- rep1$X
rep1$X <- NULL
rownames(rep2) <- rep2$X
rep2$X <- NULL
rownames(rep3) <- rep3$X
rep3$X <- NULL
rownames(rep4) <- rep4$X
rep4$X <- NULL
all_equal <- all(rownames(rep1) == rownames(rep2)) &&
all(rownames(rep1) == rownames(rep3)) &&
all(rownames(rep1) == rownames(rep4))
cat("Gene name order identical across datasets:", all_equal, "\n")
rep1 <- t(rep1)
rep2 <- t(rep2)
rep3 <- t(rep3)
rep4 <- t(rep4)
replicate <- rep(c("1", "2", "3", "4"), each = nrow(rep1))
A_B_vector <- rep(c("A", "B"), each = nrow(rep1) / 2)
time_stamp <- rep(c("T1", "T2", "T3", "T4", "T5", "T6"), each=1)
metadata <- data.frame(replicate, A_B_vector, time_stamp)
data <- rbind(rep1, rep2, rep3, rep4)
set.seed(123)
# UNSCALED PCA
pca_unscaled <- prcomp(data, scale = FALSE)
names(pca_unscaled)
# SCALED PCA
pca_scaled <- prcomp(data, scale = TRUE)
names(pca_scaled)
# NORMALIZE THE DATA
sum_data <- rowSums(data)
normalized_data <- sweep(data, 1, sum_data, "/")
# NORMALIZED PCA
pca_normalized <- prcomp(normalized_data, scale = TRUE)
pca1_unscaled <- fviz_pca_ind(pca_unscaled,
geom.ind = "point",
habillage = metadata$A_B_vector,
addEllipses = TRUE,
title = "A/B experiment")
pca2_unscaled <- fviz_pca_ind(pca_unscaled,
geom.ind = "point",
habillage = metadata$replicate,
addEllipses = TRUE,
title = "Replicates")
pca3_unscaled <- fviz_pca_ind(pca_unscaled,
geom.ind = "point",
habillage = metadata$time_stamp,
addEllipses = TRUE,
title = "Time")
pca1_unscaled + pca2_unscaled + pca3_unscaled +plot_annotation("Unscaled plots")
ggplot(pca_unscaled$x,
aes(x = PC1,
y = PC2,
shape = metadata$replicate,
size = metadata$A_B_vector,
color = metadata$time_stamp))+
geom_point()+
scale_shape_manual(values = c(1, 5, 10, 15))+
scale_size_manual( values = c(3, 5))+
scale_color_brewer(palette = "Set1")+
labs(title="Unscaled PCA",
size = "Type",
shape = "Replicate",
color = "Time")+
theme_minimal()
pca1_scaled <- fviz_pca_ind(pca_scaled,
geom.ind = "point",
habillage = metadata$A_B_vector,
addEllipses = TRUE,
title = "A/B experiment")
pca2_scaled <- fviz_pca_ind(pca_scaled,
geom.ind = "point",
habillage = metadata$replicate,
addEllipses = TRUE,
title = "Replicates")
pca3_scaled <- fviz_pca_ind(pca_scaled,
geom.ind = "point",
habillage = metadata$time_stamp,
addEllipses = TRUE,
title = "Time")
pca1_scaled + pca2_scaled+ pca3_scaled + plot_annotation("Scaled plots")
ggplot(pca_scaled$x,
aes(x = PC1,
y = PC2,
shape = metadata$replicate,
size = metadata$A_B_vector,
color = metadata$time_stamp))+
geom_point()+
scale_shape_manual(values = c(1, 5, 10, 15))+
scale_size_manual( values = c(3, 5))+
scale_color_brewer(palette = "Set1")+
labs(title = "Scaled PCA",
size = "Type",
shape = "Replicate",
color = "Time")+
theme_minimal()
pca1_normalized <- fviz_pca_ind(pca_normalized,
geom.ind = "point",
habillage = metadata$A_B_vector,
addEllipses = TRUE,
title = "A/B experiment")
pca2_normalized <- fviz_pca_ind(pca_normalized,
geom.ind = "point",
habillage = metadata$replicate,
addEllipses = TRUE,
title = "Replicates")
pca3_normalized <- fviz_pca_ind(pca_normalized,
geom.ind = "point",
habillage = metadata$time_stamp,
addEllipses = TRUE,
title = "Time")
pca1_normalized + pca2_normalized+ pca3_normalized + plot_annotation("Normalized plots")
ggplot(pca_normalized$x,
aes(x = PC1,
y = PC2,
shape = metadata$replicate,
size = metadata$A_B_vector,
color = metadata$time_stamp))+
geom_point()+
scale_shape_manual(values = c(1, 5, 10, 15))+
scale_size_manual( values = c(3, 5))+
scale_color_brewer(palette = "Set1")+
labs(title = "Normalized PCA",
size = "Type",
shape = "Replicate",
color = "Time")+
theme_minimal()
# Find outliers
point <- data.frame(pca_normalized$x)
absolute_point <- abs(point)
max_value <- max(absolute_point, na.rm = TRUE)
max_pos <- which(absolute_point == max_value, arr.ind = TRUE)
rowname <- rownames(point)[max_pos[1]]
colname <- colnames(point)[max_pos[2]]
# Remove outliers
data <- data[-max_pos[1],]
metadata <- metadata[-max_pos[1],]
# Normalize again
set.seed(123)
sum_data <- rowSums(data)
normalized_data <- sweep(data, 1, sum_data, "/")
pca_normalized <- prcomp(normalized_data, scale = TRUE)
ggplot(pca_normalized$x,
aes(x = PC1,
y = PC2,
shape = metadata$replicate,
size = metadata$A_B_vector,
color = metadata$time_stamp))+
geom_point()+
scale_shape_manual(values = c(1, 5, 10, 15))+
scale_size_manual( values = c(3, 5))+
scale_color_brewer(palette = "Set1")+
labs(title = "Normalized PCA",
size = "Type",
shape = "Replicate",
color = "Time")+
theme_minimal()
maximum_perplexity <- (nrow(normalized_data) - 1) / 3
# Unscaled tSNE
unscaled_tsne <- Rtsne(data, dims = 2, perplexity = maximum_perplexity/2)
# If we add verbose = TRUE it will tell us the error value for each 50 iterations until the maximum iterations default value, but it is unnecessary text. The tSNE is performed well for each case.
unscaled_tsne_data <- data.frame(unscaled_tsne$Y,
replicate = metadata$replicate, A_B_vector = metadata$A_B_vector, time_stamp = metadata$time_stamp)
colnames(unscaled_tsne_data) <- c("Dim1", "Dim2", "Replicate", "Type", "Time")
# Scaled tSNE
scaled_data <- scale(data)
scaled_tsne <- Rtsne(scaled_data, dims = 2, perplexity = maximum_perplexity/2)
scaled_tsne_data <- data.frame(scaled_tsne$Y, replicate = metadata$replicate, A_B_vector = metadata$A_B_vector, time_stamp = metadata$time_stamp)
colnames(scaled_tsne_data) <- c("Dim1", "Dim2", "Replicate", "Type", "Time")
#Normalized
sum_data <- rowSums(data)
normalized_data <- sweep(data, 1, sum_data, "/")
normalized_tsne <- Rtsne(normalized_data, dims = 2,
perplexity = maximum_perplexity/2)
normalized_tsne_data <- data.frame(normalized_tsne$Y,
replicate = metadata$replicate, A_B_vector = metadata$A_B_vector, time_stamp = metadata$time_stamp)
colnames(normalized_tsne_data) <- c("Dim1", "Dim2", "Replicate", "Type", "Time")
ggplot(unscaled_tsne_data, aes(x = Dim1, y = Dim2, shape = Replicate, size = Type, color = Time))+
geom_point()+
scale_shape_manual(values = c(1, 5, 10, 15))+
scale_size_manual( values = c(3, 5))+
scale_color_brewer(palette = "Set1")+
labs(title = "Unscaled tSNE plot",
size = "Type",
shape = "Replicate",
color = "Time")+
theme_minimal()
ggplot(scaled_tsne_data, aes(x = Dim1, y = Dim2, shape = Replicate, size = Type, color = Time))+
geom_point()+
scale_shape_manual(values = c(1, 5, 10, 15))+
scale_size_manual( values = c(3, 5))+
scale_color_brewer(palette = "Set1")+
labs(title = "Scaled tSNE plot",
size = "Type",
shape = "Replicate",
color = "Time")+
theme_minimal()
ggplot(normalized_tsne_data, aes(x = Dim1, y = Dim2, shape = Replicate, size = Type, color = Time))+
geom_point()+
scale_shape_manual(values = c(1, 5, 10, 15))+
scale_size_manual( values = c(3, 5))+
scale_color_brewer(palette = "Set1")+
labs(title = "Normalized tSNE plot",
size = "Type",
shape = "Replicate",
color = "Time")+
theme_minimal()
plot_reproducibility <- function(normalized_data, metadata){
maximum_perplexity <- (nrow(normalized_data) - 1) / 3
data <- Rtsne(normalized_data, perplexity = maximum_perplexity / 2)
tsne_plots <- ggplot(data$Y, aes(x=data$Y[,1], y=data$Y[,2], shape=metadata$replicate, size = metadata$A_B_vector, color = metadata$time_stamp))+
geom_point()+  scale_shape_manual(values = c(1, 5, 10, 15))+
scale_size_manual( values = c(3, 5))+
scale_color_brewer(palette = "Set1")+
labs(x="tSNE 1", y="tSNE 2", shape="Replicate", size = "Experiment Label", color = "Time")+
theme_minimal()
return(tsne_plots)
}
reproducibility_values <- list()
for (i in 1:4){
rep_plot <- plot_reproducibility(normalized_data, metadata)+ggtitle(paste0(i, " tSNE repetition"))
reproducibility_values[[i]] <- rep_plot
}
#Extract legend
reproducibility_legend<-get_legend(reproducibility_values[[1]])
no_legend_reproducibility <- lapply(reproducibility_values, "+", theme(legend.position = "none"))
grid.arrange(
arrangeGrob(grobs = no_legend_reproducibility, ncol = 2),
reproducibility_legend,
ncol=2,
widths = c(10, 1),
top="tSNE Repetitions"
)
PerplexityPlotter <- function(normalized_data, metadata, pr){
set.seed(123)
model <- Rtsne(normalized_data, perplexity = pr)
tsne_plots <- ggplot(model$Y, aes(model$Y[,1],
model$Y[,2],
shape = metadata$replicate,
size = metadata$A_B_vector, color = metadata$time_stamp))+
geom_point()+
scale_shape_manual(values = c(1, 5, 10, 15))+
scale_size_manual( values = c(3, 5))+
scale_color_brewer(palette = "Set1")+
labs(x = "tSNE 1", y = "tSNE 2", shape = "Replicate", size = "Type", color = "Time", title=paste0("tSNE plot for perplexity=", round(pr, 2)))
return(tsne_plots)
}
maximum_perplexity <- (nrow(normalized_data) - 1) / 3
test_perplexity_values <- c(1, maximum_perplexity/3, (maximum_perplexity/3) * 2, maximum_perplexity)
perplexity_plots <- list()
for (i in seq_along(test_perplexity_values)){
per_val <- test_perplexity_values[i]
per_plot <- PerplexityPlotter(normalized_data, metadata, per_val)
perplexity_plots[[i]] <- per_plot
}
perplexity_legend <- get_legend(perplexity_plots[[1]])
no_legend_perplexity <- lapply(perplexity_plots, "+", theme(legend.position = "none"))
grid.arrange(
arrangeGrob(grobs = no_legend_perplexity, ncol = 2),
perplexity_legend,
ncol = 2,
widths = c(10, 1),
top = "tSNE Perplexity"
)
plot_iterations<-function(normalized_data, metadata, num_iterations){
set.seed(123)
maximum_perplexity <- (nrow(normalized_data)-1)/3
data <- Rtsne(normalized_data, perplexity = maximum_perplexity / 2, max_iter = num_iterations)
tsne_plots <- ggplot(data$Y, aes(x=data$Y[,1], y=data$Y[,2],
shape = metadata$replicate, size = metadata$A_B_vector, color = metadata$time_stamp))+
geom_point()+
scale_shape_manual(values = c(1, 5, 10, 15))+
scale_size_manual( values = c(3, 5))+
scale_color_brewer(palette = "Set1")+
labs(x="tSNE 1", y="tSNE 2", shape = "Replicate", size = "Type", color = "Time",
title=paste0(num_iterations, " iterations tSNE plot"))
return(tsne_plots)
}
iterations<-c(50, 600, 1000, 10000)
iterations_plots <- list()
for (i in seq_along(iterations)){
iter_num <- iterations[i]
iter_plot <- plot_iterations(normalized_data, metadata, iter_num)
iterations_plots[[i]] <- iter_plot
}
iterations_legend <- get_legend(iterations_plots[[1]])
no_legend_iterations <- lapply(iterations_plots, "+", theme(legend.position = "none"))
grid.arrange(
arrangeGrob(grobs = no_legend_iterations, ncol = 2),
iterations_legend,
ncol=2,
widths = c(10, 1),
top="tSNE Iterations"
)
plot_umap <- function(data, metadata){
umap_plots <- ggplot(data$layout, aes(x = data$layout[,1], y = data$layout[,2], shape = metadata$replicate, size = metadata$A_B_vector, color = metadata$time_stamp))+
geom_point()+
scale_shape_manual(values = c(1, 5, 10, 15))+
scale_size_manual( values = c(3, 5))+
scale_color_brewer(palette = "Set1")+
labs(x = "X", y = "Y", shape = "Replicate", size = "Type", color = "Time")+
theme_minimal()
return(umap_plots)
}
umap_raw_plot <- umap(data)
plot_umap(umap_raw_plot, metadata)+
labs(title = "UMAP Raw data plot")
umap_normalized_plot <- umap(normalized_data)
plot_umap(umap_normalized_plot, metadata)+
labs(title = "UMAP Normalized data plot")
umap_training <- metadata$replicate %in% c("1", "2", "3")
umap_rep4_data <- normalized_data[umap_training, ]
metadata_train <- metadata[umap_training, ]
umap_train <- umap(umap_rep4_data)
plot_umap(umap_train, metadata_train)+
labs(title = "UMAP data Replicates 1-3")
rep4_umap <- predict(umap_train, rep4)
rep4_metadata <- metadata[!umap_training, ]
rep4_data <- data.frame(Dim1 = rep4_umap[,1], Dim2 = rep4_umap[,2], Type = rep4_metadata$A_B_vector, Time = rep4_metadata$time_stamp)
ggplot(rep4_data, aes(x = Dim1, y = Dim2, shape = Type, color = Time))+
geom_point()+
scale_shape_manual(values = c(1, 5, 10, 15))+
scale_color_brewer(palette = "Set1")+
labs(title = "Prediction for Replicate 4")+
theme_minimal()
neighbor_plotter <- function(data, metadata, num){
n_neigh_umap <- umap(data, n_neighbors = num)
umap_plot <- plot_umap(n_neigh_umap, metadata)
umap_plot <- umap_plot+
labs(title=paste0("Neighbors: ", num))
return(umap_plot)
}
neighbor_plots <- list()
neighbors <- seq(2, nrow(normalized_data), by = 10)
for (i in seq_along(neighbors)){
num <- neighbors[i]
num_plot <- neighbor_plotter(normalized_data, metadata, num)
neighbor_plots[[i]] <- num_plot
}
neighbor_legend <- get_legend(neighbor_plots[[1]])
no_legend_neighbor <- lapply(neighbor_plots, "+", theme(legend.position = "none"))
grid.arrange(
arrangeGrob(grobs = no_legend_neighbor, ncol = 2),
neighbor_legend,
ncol = 2,
widths = c(10, 1),
top="UMAP Neighbors"
)
min_dist_plotter <- function(data, metadata, dist_value){
min_dist_umap <- umap(data, min_dist = dist_value)
umap_plot <- plot_umap(min_dist_umap, metadata)
umap_plot <- umap_plot+
labs(title=paste0("Minimum distance: ", dist_value))
return(umap_plot)
}
min_dist_list <- list()
distances <- c(0.1, 0.3, 0.5, 0.7, 0.9)
for (i in seq_along(distances)){
min <- distances[i]
min_dist_plot <- min_dist_plotter(normalized_data, metadata, min)
min_dist_list[[i]] <- min_dist_plot
}
min_dist_legend <- get_legend(min_dist_list[[1]])
no_legend_min_dist <- lapply(min_dist_list, "+", theme(legend.position = "none"))
grid.arrange(
arrangeGrob(grobs = no_legend_min_dist, ncol = 2),
min_dist_legend,
ncol = 2,
widths = c(10, 1),
top="UMAP Minimum Distance"
)
epoch_plotter <- function(data, metadata, epoch){
epoch_umap <- umap(data, n_epochs = epoch)
umap_plot <- plot_umap(epoch_umap, metadata)
umap_plot <- umap_plot+
labs(title=paste0("Number of iterations: ", epoch))
return(umap_plot)
}
epoch_list <- list()
epoch_values <- c(100, 500, 1000, 2000)
for (i in seq_along(epoch_values)){
num <- epoch_values[i]
epoch_plot <- epoch_plotter(normalized_data, metadata, num)
epoch_list[[i]] <- epoch_plot
}
epoch_legend <- get_legend(epoch_list[[1]])
no_legend_epoch <- lapply(epoch_list, "+", theme(legend.position = "none"))
grid.arrange(
arrangeGrob(grobs = no_legend_epoch, ncol = 2),
epoch_legend,
ncol=2,
widths = c(10, 1),
top="UMAP Number of iterations"
)
final_pca1 <- ggplot(pca_normalized$x,
aes(x = PC1, y = PC2, shape = metadata$replicate, size = metadata$A_B_vector, color = metadata$time_stamp))+
geom_point()+
scale_shape_manual(values = c(1, 5, 10, 15))+
scale_size_manual( values = c(3, 5))+
scale_color_brewer(palette = "Set1")+
labs(size = "Type",
shape = "Replicate",
color = "Time")+
theme_minimal()
final_pca2 <- fviz_pca_ind(pca_normalized,              geom.ind = "point",
habillage = metadata$A_B_vector,
addEllipses = TRUE) +
labs(x = "PC1", y = "PC2")+
theme_minimal()
final_pca1 + final_pca2 + plot_annotation(title = "Final PCA representation with accurate data")
set.seed(123)
maximum_perplexity <- (nrow(normalized_data) - 1) / 3
ggplot(normalized_tsne_data, aes(x = Dim1, y = Dim2, shape = metadata$replicate, size = metadata$A_B_vector, color = metadata$time_stamp)) +
geom_point() +
scale_shape_manual(values = c(1, 5, 10, 15))+
scale_size_manual( values = c(3, 5))+
scale_color_brewer(palette = "Set1")+
labs(title = "Final tSNE representation with accurate data",
x = "Dim1", y = "Dim2", shape = "Replicate", size = "Type", color = "Time") +
theme_minimal()
final_umap <- umap(normalized_data, n_epochs = 500, min_dist = 0.3, n_neighbors = 22)
plot_umap(final_umap, metadata)+
labs(title = "Final UMAP representation with accurate data")
plot_reproducibility <- function(normalized_data, metadata){
maximum_perplexity <- (nrow(normalized_data) - 1) / 3
data <- Rtsne(normalized_data, perplexity = maximum_perplexity / 2)
tsne_plots <- ggplot(data$Y, aes(x=data$Y[,1], y=data$Y[,2], shape=metadata$replicate, size = metadata$A_B_vector, color = metadata$time_stamp))+
geom_point()+  scale_shape_manual(values = c(1, 5, 10, 15))+
scale_size_manual( values = c(3, 5))+
scale_color_brewer(palette = "Set1")+
labs(x="tSNE 1", y="tSNE 2", shape="Replicate", size = "Type", color = "Time")+
theme_minimal()
return(tsne_plots)
}
reproducibility_values <- list()
for (i in 1:4){
rep_plot <- plot_reproducibility(normalized_data, metadata)+ggtitle(paste0(i, " tSNE repetition"))
reproducibility_values[[i]] <- rep_plot
}
#Extract legend
reproducibility_legend<-get_legend(reproducibility_values[[1]])
no_legend_reproducibility <- lapply(reproducibility_values, "+", theme(legend.position = "none"))
grid.arrange(
arrangeGrob(grobs = no_legend_reproducibility, ncol = 2),
reproducibility_legend,
ncol=2,
widths = c(10, 1),
top="tSNE Repetitions"
)
rep4_umap <- predict(umap_train, rep4)
rep4_metadata <- metadata[!umap_training, ]
rep4_data <- data.frame(Dim1 = rep4_umap[,1], Dim2 = rep4_umap[,2], Type = rep4_metadata$A_B_vector, Time = rep4_metadata$time_stamp)
ggplot(rep4_data, aes(x = Dim1, y = Dim2, shape = Type, color = Time))+
geom_point()+
scale_shape_manual(values = c(1, 5, 10, 15))+
scale_color_brewer(palette = "Set1")+
labs(title = "Prediction for Replicate 4")+
theme_minimal()
